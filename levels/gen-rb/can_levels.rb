#
# Autogenerated by Thrift Compiler (0.12.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'levels_types'

module CanLevels
  class Client
    include ::Thrift::Client

    def get_cans_above_threshold(percent_full)
      send_get_cans_above_threshold(percent_full)
      return recv_get_cans_above_threshold()
    end

    def send_get_cans_above_threshold(percent_full)
      send_message('get_cans_above_threshold', Get_cans_above_threshold_args, :percent_full => percent_full)
    end

    def recv_get_cans_above_threshold()
      result = receive_message(Get_cans_above_threshold_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_cans_above_threshold failed: unknown result')
    end

    def update_can_level(can_id, percent_full)
      send_update_can_level(can_id, percent_full)
    end

    def send_update_can_level(can_id, percent_full)
      send_oneway_message('update_can_level', Update_can_level_args, :can_id => can_id, :percent_full => percent_full)
    end
  end

  class Processor
    include ::Thrift::Processor

    def process_get_cans_above_threshold(seqid, iprot, oprot)
      args = read_args(iprot, Get_cans_above_threshold_args)
      result = Get_cans_above_threshold_result.new()
      result.success = @handler.get_cans_above_threshold(args.percent_full)
      write_result(result, oprot, 'get_cans_above_threshold', seqid)
    end

    def process_update_can_level(seqid, iprot, oprot)
      args = read_args(iprot, Update_can_level_args)
      @handler.update_can_level(args.can_id, args.percent_full)
      return
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class Get_cans_above_threshold_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    PERCENT_FULL = 1

    FIELDS = {
      PERCENT_FULL => {:type => ::Thrift::Types::DOUBLE, :name => 'percent_full'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_cans_above_threshold_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Can_levels}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Update_can_level_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    CAN_ID = 1
    PERCENT_FULL = 2

    FIELDS = {
      CAN_ID => {:type => ::Thrift::Types::I64, :name => 'can_id'},
      PERCENT_FULL => {:type => ::Thrift::Types::DOUBLE, :name => 'percent_full'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Update_can_level_result
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

end

